apply plugin: 'groovy'

sourceCompatibility = 1.7
targetCompatibility = 1.7

// Quick-and-dirty way of adding both Stubs and Core without dealing with jarsâ€¦
sourceSets {
  main {
    groovy {
      srcDirs += "$rootProject.projectDir/Stubs/src/main/java"
      srcDirs += "$rootProject.projectDir/Core/src/main/java"
    }
  }
}

dependencies {
  implementation gradleApi()
  implementation localGroovy()
  implementation 'com.android.tools.build:gradle:2.3.3'
  implementation 'org.ow2.asm:asm-all:5.1'
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

// ------ Testing ------

configurations {
  testResourceJars
}

// testing
dependencies {
  testImplementation gradleTestKit()
  testImplementation 'junit:junit:4.12'
  testImplementation 'org.mockito:mockito-core:2.8.9'
  testResourceJars project(':Core')
}

sourceSets {
  test {
    // put main and test classes on the junit classpath - Android studio fails to do so ðŸ˜•
    ['groovy/test', 'groovy/main', 'java/main'].forEach {
      output.dir("$buildDir/classes/$it")
    }
  }
}

task copyCoreAndStubsJars(type: Copy) {
  from configurations.testResourceJars
  into sourceSets.test.resources.srcDirs[0]

  rename { it.replace("-$version", "") } // strip version for consistent resource name
}

// Inject the version number into the resources
import org.apache.tools.ant.filters.ReplaceTokens

def replaceTokens = [ // keys that we replace during resource processing
        version   : project.version,
        runtime   : "com.rakuten.tech.mobile.perf:performance-tracking:$project.version".toString(),
        repository: 'http://artifactory.raksdtd.com/artifactory/libs-release'
]

processTestResources {
  dependsOn copyCoreAndStubsJars
  with copySpec {
    exclude '**/*.jar'
    from sourceSets.main.resources
    from sourceSets.test.resources
    destinationDir sourceSets.test.groovy.outputDir
    filter(ReplaceTokens, tokens: replaceTokens)
  }
  with copySpec { // don't change jar files
    include '**/*.jar'
    from sourceSets.test.resources
    destinationDir sourceSets.test.groovy.outputDir
  }
}

processResources {
  filter(ReplaceTokens, tokens: replaceTokens)
}

def tmpDir = { cls ->
  def tmpDir = new File("${project.projectDir}${File.separator}tmp")
  if (!tmpDir.exists()) cls(tmpDir)
}

tasks.test.doFirst {
  tmpDir { it.mkdir() }
}
tasks.test.doLast {
  tmpDir { it.deleteDir() }
}
// local jar and sources jar to debug local code changes
tasks.test.dependsOn(tasks.assemble)
tasks.test.dependsOn(tasks.sourcesJar)

apply plugin: 'net.saliman.cobertura'
// see https://github.com/stevesaliman/gradle-cobertura-plugin/blob/master/usage.md


cobertura {
  coverageSourceDirs = [
      sourceSets.main.groovy.srcDirs
  ]
  coverageDirs = [
      sourceSets.main.groovy.outputDir
  ]
  coverageEncoding = 'UTF-8'
  coverageFormats = ['html', 'xml']
  coverageIgnoreTrivial = true
}

check.dependsOn tasks.cobertura
