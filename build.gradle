import com.rakuten.tech.tool.CheckGradleFilesForSnapshotDependencies

buildscript {
  apply from: "config/index.gradle"
  repositories {
    // try to work around jcenters akamai misconfiguration issue
    // see https://github.com/gradle/gradle/issues/4703
    jcenter { url "http://jcenter.bintray.com" }
    maven { url 'https://maven.google.com' }
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
    classpath "com.android.tools.build:gradle:$CONFIG.versions.android.plugin"
    classpath 'com.dicedmelon.gradle:jacoco-android:0.1.1'
    classpath 'net.saliman:gradle-cobertura-plugin:2.5.4'
    classpath 'digital.wup:android-maven-publish:3.1.0'
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
    classpath 'pl.allegro.tech.build:axion-release-plugin:1.8.1'
  }
}

// do something if a task exists after evaluate
// receives the task as delegate and parameter
Project.metaClass.eventuallyHasTask = { String taskName, Closure<Task> cls = null ->
  delegate.afterEvaluate {
    def task = it.tasks.find { it.name == taskName }
    if(task != null && cls != null) {
      cls.delegate = task
      cls.resolveStrategy = DELEGATE_FIRST
      cls(task)
    }
  }
}

allprojects { subproject ->
  apply plugin: 'com.github.ben-manes.versions'
  dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
      rules.all { ComponentSelection selection ->
        boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', '-', '_'].any { selection.candidate.version.contains(it) }
        if (rejected) selection.reject('Release candidate')
      }
    }
  }
  subproject.eventuallyHasTask('assemble') { dependsOn dependencyUpdates }

  apply plugin: 'pl.allegro.tech.build.axion-release'
  scmVersion {
    useHighestVersion = true
    tag {
      prefix = 'v'
      versionSeparator = ''
      versionIncrementer 'incrementMinor'
    }
  }
  subproject.version = scmVersion.version

  repositories {
    maven { url 'https://maven.google.com' }
    jcenter()
  }
}

task ensurePreRelease {
  doLast {
    if(!version.contains('-')) throw new GradleException("Version $version is not a pre release version, failing build")
    else println "version $version is pre release version, proceeding with build."
  }
}

task preReleaseCheck(type: CheckGradleFilesForSnapshotDependencies) {
  exclude = [
      ~/.*\/Example\/.*\.gradle/,
      ~/.*\/config\/.*\.gradle/,
      ~/.*\/buildSrc\/.*\.gradle/
  ]
}