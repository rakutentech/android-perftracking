apply from: '../config/android/library.gradle'

android {
  defaultConfig {
    resValue 'string', 'perftracking__version', project.version

    def property = { name ->
      project.hasProperty(name) ? project."${name}" : "";
    }

    buildConfigField("String", "DEFAULT_CONFIG_URL_PREFIX", "\"${property('DEFAULT_CONFIG_URL_PREFIX')}\"")
    buildConfigField("String", "DEFAULT_LOCATION_URL_PREFIX", "\"${property('DEFAULT_LOCATION_URL_PREFIX')}\"")
  }

  testOptions {
    unitTests{
      includeAndroidResources = true
      all {
        jacoco {
          includeNoLocationClasses = true
        }
      }
    }
  }
}

configurations { copyJar }

task copyJar(type: Copy) {
  from configurations.copyJar
  into 'libs'
}

android.libraryVariants.all {
  project.tasks["generate${it.buildType.name.capitalize()}Sources"].dependsOn copyJar
}

dependencies {
  copyJar project(':performance-tracking-core')
  implementation files("libs/performance-tracking-core-${project.version}.jar")

  api "com.android.support:support-annotations:$CONFIG.versions.android.libraries.support"
  implementation "com.android.support:support-v4:${CONFIG.versions.android.libraries.support}"
  implementation "com.android.volley:volley:${CONFIG.versions.android.libraries.volley}"

  implementation 'com.rakuten.tech.mobile:manifest-config-annotations:0.1.0'
  annotationProcessor   'com.rakuten.tech.mobile:manifest-config-processor:0.1.0'

  testImplementation 'junit:junit:4.12'
  testImplementation 'org.assertj:assertj-core:3.11.1'
  testImplementation 'org.skyscreamer:jsonassert:1.5.0'
  testImplementation "org.mockito:mockito-core:2.23.0"
  testImplementation 'org.robolectric:robolectric:3.8'
  testImplementation 'com.squareup.okio:okio:1.14.0'
}

apply from: "../config/quality/jacoco/android.gradle"
apply from: "../config/quality/checkstyle/android.gradle"
apply from: "../config/quality/pmd/android.gradle"

checkstyle { // TODO: fix all findbugs warnings
  ignoreFailures = true
}

pmd { // TODO: fix all findbugs warnings
  ignoreFailures = true
}

task checkUrlPrefixes {
  doLast {
    if(System.env.CI && System.env.CIRCLECI) {
      println "allow empty URL prefixes for location and config APIs on circleCI build jobs"
    } else if (!project.hasProperty('DEFAULT_CONFIG_URL_PREFIX') ||
        !project.hasProperty('DEFAULT_LOCATION_URL_PREFIX')) {
      throw new GradleException("Cannot Bulid Runtime without default config & location API" +
          " prexfixes.\nConfigure 'DEFAULT_CONFIG_URL_PREFIX' and " +
          "'DEFAULT_LOCATION_URL_PREFIX' in your environment's global gradle.properties")
    }
  }
}

tasks.whenTaskAdded { task ->
  if (task.name.contains("assemble")) {
    task.dependsOn checkUrlPrefixes
  }
}