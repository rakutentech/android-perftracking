apply from: '../config/android/library.gradle'
apply plugin: 'me.tatarka.retrolambda'

if(System.env.CI && System.env.CIRCLECI) {
  project.ext.DEFAULT_CONFIG_URL_PREFIX = "https://config.example.com/"
  project.ext.DEFAULT_LOCATION_URL_PREFIX = "https://location.example.com/"
}

android {
  defaultConfig {
    resValue 'string', 'perftracking__version', project.version

    def property = { name ->
      project.hasProperty(name) ? project."${name}" : ""
    }

    buildConfigField("String", "DEFAULT_CONFIG_URL_PREFIX", "\"${property('DEFAULT_CONFIG_URL_PREFIX')}\"")
    buildConfigField("String", "DEFAULT_LOCATION_URL_PREFIX", "\"${property('DEFAULT_LOCATION_URL_PREFIX')}\"")

    consumerProguardFiles 'proguard.rules'
  }

  testOptions {
    unitTests{
      includeAndroidResources = true
      returnDefaultValues = true
      all {
        jacoco {
          includeNoLocationClasses = true
        }
      }
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}

configurations { copyJar }

task copyJar(type: Copy) {
  from configurations.copyJar
  into 'libs'
}

android.libraryVariants.all {
  project.tasks["generate${it.buildType.name.capitalize()}Sources"].dependsOn copyJar
}

dependencies {
  copyJar project(':performance-tracking-core')
  implementation files("libs/performance-tracking-core-${project.version}.jar")

  api "com.android.support:support-annotations:$CONFIG.versions.android.libraries.support"
  implementation "com.android.support:support-v4:${CONFIG.versions.android.libraries.support}"
  implementation 'com.squareup.retrofit2:retrofit:2.4.0'

  // DocLava needs the javax.annotations.Nullable class (used by Retrofit), so findbugs is added
  // to bring this to the classpath: https://stackoverflow.com/a/19031259
  compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
  // Doclava needs an annotation class from this package (used by Retrofit)
  compileOnly 'org.codehaus.mojo:animal-sniffer-annotations:1.18'

  implementation 'com.rakuten.tech.mobile:manifest-config-annotations:0.1.0'
  annotationProcessor   'com.rakuten.tech.mobile:manifest-config-processor:0.1.0'

  testImplementation 'junit:junit:4.12'
  testImplementation 'org.assertj:assertj-core:3.11.1'
  testImplementation 'org.skyscreamer:jsonassert:1.5.0'
  testImplementation "org.mockito:mockito-core:2.23.0"
  testImplementation 'org.robolectric:robolectric:3.8'
  testImplementation 'com.squareup.okio:okio:1.14.0'
  testImplementation 'com.squareup.okhttp3:mockwebserver:3.11.0'
  testImplementation 'org.awaitility:awaitility:3.1.3'
}

apply from: "../config/quality/jacoco/android.gradle"
apply from: "../config/quality/checkstyle/android.gradle"
apply from: "../config/quality/pmd/android.gradle"

checkstyle { // TODO: fix all findbugs warnings
  ignoreFailures = true
}

pmd { // TODO: fix all findbugs warnings
  ignoreFailures = true
}

apply from: '../config/documentation/doclava/android.gradle'

task checkUrlPrefixes {
  doLast {
    if (!project.hasProperty('DEFAULT_CONFIG_URL_PREFIX') ||
        !project.hasProperty('DEFAULT_LOCATION_URL_PREFIX')) {
      throw new GradleException("Cannot Bulid Runtime without default config & location API" +
          " prexfixes.\nConfigure 'DEFAULT_CONFIG_URL_PREFIX' and " +
          "'DEFAULT_LOCATION_URL_PREFIX' in your environment's global gradle.properties")
    }
  }
}

tasks.whenTaskAdded { task ->
  if (task.name.contains("assemble") || task.name.contains("test")) {
    task.dependsOn checkUrlPrefixes
  }
}